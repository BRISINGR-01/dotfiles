#!/bin/node

import { spawnSync } from "child_process";
import fs from "fs";
import path from "path";
import cmd, { outToString } from "./cmd.js";

let isCreatingNewTopic = false;
const packagesDir = path.resolve(cmd.dotfilesDir, "nix", "packages");

function removePackage(topic, pkg) {
	const packagesFile = cmd
		.read(path.resolve(packagesDir, `${topic}.nix`))
		.split("\n")
		.filter((line) => line.trim() !== pkg)
		.join("\n");

	cmd.writeTo(path.resolve(packagesDir, `${topic}.nix`), packagesFile);
}

function createTopic() {
	const newTopic = cmd.prompt("Enter new topic:", { color: "cyan" });
	if (!newTopic) cmd.exit();

	cmd.print(`Creating new topic: ${newTopic}`, { color: "greenBright", bold: true });
	const varName = newTopic.replace(/\s/g, "_");
	const defaultNix = cmd.read(path.resolve(packagesDir, "default.nix"));
	cmd.writeTo(
		path.resolve(packagesDir, "default.nix"),
		defaultNix
			.replace("in with pkgs;", `  ${varName} = import ./${newTopic}.nix;\nin with pkgs;`)
			.replace("[", `${varName} { pkgs = pkgs; } ++ [`)
	);

	cmd.writeTo(path.resolve(packagesDir, `${newTopic}.nix`), "{ pkgs }:\n\nwith pkgs; [\n]");

	return newTopic;
}

function gracefulExit(topic, pkg) {
	if (isCreatingNewTopic) removeTopic(topic);

	removePackage(topic, pkg);
}

function chooseTopic() {
	const topic = cmd.fzf(
		fs
			.readdirSync(packagesDir)
			.filter((topic) => topic !== "default.nix")
			.map((topic) => topic.replace(".nix", ""))
			.concat("<new topic>")
	);

	if (!topic) cmd.print("No topic selected", { color: "gray" }).exit();

	if (topic === "<new topic>") {
		cmd.print("Creating new topic", { color: "blue" });
		isCreatingNewTopic = true;
		topic = createTopic();
	} else {
		cmd.print("Using topic: " + topic, { color: "blue" });
	}

	return topic;
}

function installPackage(topic, pkg) {
	const packagesFile = cmd.read(path.resolve(packagesDir, `${topic}.nix`));
	cmd.writeTo(path.resolve(packagesDir, `${topic}.nix`), packagesFile.replace("[", `[\n  ${pkg}`));

	cmd.print(`Installing package ${pkg} in "${topic}"`, {
		color: "greenBright",
		bold: true,
	});
}

let topic, pkg;
if (cmd.parameter) {
	pkg = cmd.parameter;
	topic = chooseTopic();
	installPackage(topic, pkg);
} else {
	pkg = outToString(
		spawnSync("bash", ["-c", "nix-search-tv print | tv"], {
			stdio: ["inherit", "pipe", "inherit"], // stdin -> terminal, stdout -> pipe
			env: process.env,
		}).stdout
	).split(" ")[1];

	if (!pkg || pkg.length === 0) cmd.print("No package entered", { color: "gray" }).exit();

	topic = chooseTopic();
	installPackage(topic, pkg);
}

process.on("SIGINT", function () {
	cmd.error("Caught interrupt signal");
	gracefulExit(topic, pkg);
	cmd.exit(1);
});

try {
	if (!cmd.bool("home-manager switch")) {
		cmd.error("Failed to install package(s)");
		gracefulExit(topic, pkg);
		cmd.exit(1);
	}

	cmd.notify(`${pkg} downloaded`);
	cmd.print("Done", { color: "blueBright", bold: true });
} catch (error) {
	console.log(error);
	gracefulExit(topic, pkg);
}
